
Shader "RayMarching/FSQ_Volume" {
	
	Properties{

		_Sea_Base("Sea_Base", Color) = (0.1,0.19,0.22,1)
		_Sea_Water("Sea_Water", Color) = (0.8, 0.9, 0.6, 1)

		//_LazyRayMarch("use lazy marching", Float) = 0
		_Epsilon("MarchDistance", Range(0,1)) = 0.1
		_MaxMarchingSteps("Max marching steps", Range(0,255)) = 100

		_FValue("F",Range(0,100)) = 0
		_AValue("A",Range(0,1.0)) = 0
		_AuxValue("AuxValue",Range(1,100)) = 0

		_NoiseAmplitude("NoiseAmplitude",Range(1,100)) = 0





	}
		SubShader{
		Tags{ "Queue" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha

			Pass{
			CGPROGRAM
			//ATENTION: note that Unity follows camera pointing to positive.
			//however, in the basis vectors z is pointing to the negative as in opengl convenction
			#define F UNITY_MATRIX_V[2].xyz
			#define R UNITY_MATRIX_V[0].xyz
			#define U UNITY_MATRIX_V[1].xyz
			#define Near _ProjectionParams.y
			#define Far  _ProjectionParams.z
			#define O _WorldSpaceCameraPos.xyz

			float mapScene(float3 p);

		#include "Assets/GerstnerWaves/TrochoidWaves.cginc"
		#include "SDFUtility.cginc"
		#include "NoiseUtility.cginc"

		#include "UnityStandardBRDF.cginc"


		#pragma vertex vert
		#pragma fragment frag
		#pragma target 5.0
	
		#pragma shader_feature LERP_RAYMARCH
		#pragma shader_feature BISECTION_RAYMARCH
		#pragma shader_feature SECANT_RAYMARCH

		#pragma shader_feature NORMALS
		#pragma shader_feature DISTANCE
	    #pragma shader_feature CONVERGENCE
#pragma shader_feature LIGHTING
#pragma shader_feature ALL


		struct vertInput
		{
			float4 pos: POSITION;
			float2 UV:  TEXCOORD0;
			
		};

		struct fragInput
		{
			float4 pos: SV_POSITION;
			float2 UV:  TEXCOORD0;
			
		};

		struct fragOutput
		{
			float4 col: COLOR;
			float depth:  DEPTH;

		};

		fragInput vert(vertInput IN)
		{
			fragInput OUT;
			OUT.pos = IN.pos;
			OUT.pos.xy *= 2;
			OUT.pos.z = 1;
			
			OUT.UV = IN.UV;
			return OUT;
		}
		
		uniform half _MaxMarchingSteps;
		uniform float _Epsilon;
		uniform float _FValue;
		uniform float _AValue;
		uniform float4 _Sea_Base;
		uniform float4	_Sea_Water;

			
		float mapScene(float3 p) {
			//return sdfSphere(p+ float3(0,0, _AuxValue));

			

			float wDist = sdWave(p);

			float sDist = sdSphere(p + float3(0, 0, -30), 400);

			float seaSphere = opSmoothIntersection(sDist, -wDist, _AuxValue);
			//float3 c = float3(100, 50, 50);
			//float3 p_0 = fmod(p + float3(0, _Time[2], 0), c) - 0.5*c;

			//float spheres = sdSphere(float3(p_0.x, p_0.y, p_0.z), 1);
			
			float b= sdBox(p , float3(400,100,400));
			//return b;
			return sDist;
		}

		fragOutput frag(fragInput IN) 
		{
			float3 D = normalize(getWorldUV(IN.UV.xy));
			Ray r = initRay(O, D);
			int steps = 0;

			fragOutput Out;
			float f = _FValue;
			float a = _AValue;
			float voro = 0;
			float vorosteps = 1;
			for (int j = 0; j < vorosteps; j++)
			{
				float fbm =  voronoi(float3(IN.UV.xy , _Time[2])*f).x;
				//fbm = fbm * 2 - 1;
				voro += fbm;
				f *= 2.4;
				//a *= 2.4;

			}
			voro/= vorosteps;
			Out.col = 1-worleyNoise3D(float3(IN.UV.xy, _Time[2]),f);
			Out.col.a = 1;
			Out.depth = 1;

				return Out;
#if defined(LERP_RAYMARCH)
			float dist = marchSceneLerpSort(r, _MaxMarchingSteps, _Epsilon, steps);
#elif defined(BISECTION_RAYMARCH)
			float dist = marchSceneBisection(r, _MaxMarchingSteps, _Epsilon, steps);
#elif defined(SECANT_RAYMARCH)
			float dist = marchSceneSecant(r, _MaxMarchingSteps, _Epsilon, steps);
#else

		float dist = marchScene(r, _MaxMarchingSteps, _Epsilon, steps);

#endif 

	/*
		    clip(Far-dist-_Epsilon	);

			float3 p = getRayPoint(r, dist);

			int volumeSamples = 100;
			float accumdist = 0; 
				int nstps = 64;
			float stepSize = 400/nstps;
			int i = 1;

			float4 dst = float4(0, 0, 0, 0);
			float3 nextp = p;
			float voro = 0;


			while( mapScene(nextp=getRayPoint(r, dist + stepSize*i)) < 0 && i<nstps )
			{
				i++;
				nextp +=float3(0,0,_Time[1]*100) ;
				
				float f = _FValue;
				float a = _AValue;
				float maxA;
				for (int j = 0; j < 5; j++)
				{
					float fbm =(1-voronoi(nextp.xyz/f).x);
					fbm *= 2.;
					fbm -= 1.;
					fbm *= a;
					
					voro += fbm;
					f *= 2.4;
					a *= 2.4; 
		
				}
				voro = saturate(voro) ;

				float4 src = saturate(voro);
				src.rgb *= src.a;
				dst = (1.0 - dst.a) * src + dst; //lerp(src, dst, dst.a);//

				accumdist += saturate(voro);
				if (voro > 0.99)break;
				
				
				
			}
			accumdist /= nstps*1.0;
			
			

			Out.col = 1;//float4(accumdist, accumdist, accumdist, 1);
			Out.col.a = dst;
			
	


			float4 projP = mul(UNITY_MATRIX_VP, float4(nextp.xyz, 1));
			float depth = projP.z / projP.w;

#if defined(UNITY_REVERSED_Z)
			Out.depth = depth;
#else
			Out.depth = 1-depth	;
#endif

			//Out.col = dist/Far;
			//Out.col.a = 1;
			return Out;
		*/
		}



		
		ENDCG

		}
	}

	CustomEditor "FullScreenQuadGUI"

}
